function [vsOi,tform] =register_eachVolFun(obj,vsI,vs,i,tType,Rf,Vf0,Nbins,iVolRef,MI,tF,Vf,Nbits,vsO,MIref)

        %save(['IterationS1_' num2str(i) '.mat'])     
        % Storage (original data)
        Vm0 = vsI(i).data;
        % Moving volumes
        Vm{1} = vs(1,i).data;
        Vm{2} = vs(2,i).data;
        Vm{3} = vs(3,i).data;
        Rm = obj.Volref3d(vs(1,i));
        % Is centered volume a better initialization ?
        Vr0 = imwarp(...
            Vm0 ,Rm, affine3d(eye(4)),...
            'bicubic','OutputView',Rf);
        MIc(i) = MCC_MutualInfomation(Vf0, Vr0, Nbins);
        Rm0 = obj.Volref3d(vs(1,i), iVolRef);
        Vr0 = imwarp(...
            Vm0 ,Rm0, affine3d(eye(4)), ...
            'bicubic','OutputView',Rf);
        MI0(i) = MCC_MutualInfomation(Vf0, Vr0, Nbins);
        if MI0(i)>MIc(i)
            Rm = Rm0;
        end
        %save(['IterationS2_' num2str(i) '.mat'])  
        % Reference volume
        if (i==iVolRef) || strcmp(vsI(i).name,'Contours') % NGR 2016 10 21
            MutInfo =  MCC_MutualInfomation(Vf0, Vf0, Nbins);
            for iType = 1:length(tType)
                for iData = 1:length(Vm)
                    MI(i,iType,iData) = MutInfo;
                end
            end
            % Update
            obj.tform{i} = ...
                affine3d(eye(4));
            if (i==iVolRef) % NGR 2016 10 21
                vsO(i).name = ...
                    [vsO(i).name ' [Reference]'];
            end
            vsO(i).UpdateMetadata;
            vsO(i).eType = MCC_eType.Registered;
        else
            % Verbose
            tic;
            scrF = vsI(i).root;
            %%%% 7/19
            MCC_Disp(sprintf('Fixed image:'), 5);
            MCC_Disp(vsI(iVolRef).root,5);
            MCC_Disp(sprintf('Moving image:'), 5);
            %%%%%%%%
            MCC_Disp(scrF,5);
            MCC_Disp(sprintf('Type        Inte.       Grad.       Edg.        Inte.       Grad.       Edg.'), 5);
            MCC_Disp(sprintf('----        ----------------------------        ----------------------------'), 5);
            % Type loop (j)
            for j=1:length(tType)
                MCC_Disp(tType{j},5);
                % Best previous transform for initialization
                MI_ = squeeze(MI(i,:,:));
                tF_ = squeeze(tF(i,:,:));
                [~, ind] = max(MI_(:));
                tFini = tF(ind);
                %save(['IterationS3_' num2str(j) '_' num2str(i) '.mat'])  
                % Data loop
                for k = 1:length(Vm)
                    if j==1
                        % Non transformation case
                        tF(i,j,k) = tFini;
                    else
                        try
                            % Transformation search
                            if isempty(...
                                    strfind(obj.content{i},'Mask'))
                                % Similarity & Affine transformations limited to
                                % the smallest FOV
                                if ...
                                        j>=3 && ...
                                        sum(size(Vf{k})-size(Vm{k}))~=0 ...
                                        % Dimensions
                                    Rx(1)=max(Rm.XWorldLimits(1),Rf.XWorldLimits(1));
                                    Rx(2)=min(Rm.XWorldLimits(2),Rf.XWorldLimits(2));
                                    Ry(1)=max(Rm.YWorldLimits(1),Rf.YWorldLimits(1));
                                    Ry(2)=min(Rm.YWorldLimits(2),Rf.YWorldLimits(2));
                                    Rz(1)=max(Rm.ZWorldLimits(1),Rf.ZWorldLimits(1));
                                    Rz(2)=min(Rm.ZWorldLimits(2),Rf.ZWorldLimits(2));
                                    crop_mm = [Rx ; Ry ; Rz];
                                    % Fixed volume (crop)
                                    Vfc = MCC_CloneObj(vsI(iVolRef));
                                    Vfc.data = Vf{k};
                                    Vfc.Crop(crop_mm);
                                    Rfc = obj.Volref3d(Vfc);
                                    % Moving volume (crop)
                                    Vmc = MCC_CloneObj(vsI(1));
                                    Vmc.data = Vm{k};
                                    Vmc.Crop(crop_mm);
                                    Rmc = obj.Volref3d(Vmc);
                                    % Estimate transformation
%                                     tF(i,j,k) = ...
%                                         obj.Volregtform( ...
%                                         Vfc.data, Rfc, ...
%                                         Vmc.data, Rmc, ...
%                                         tType{j}, ...
%                                         tFini, Nbits);
                                     tF(i,j,k) = ...
                                        obj.VolregtformTest( ...
                                        Vfc.data, Rfc, ...
                                        Vmc.data, Rmc, ...
                                        tType{j}, ...
                                        tFini, Nbits,i,j,k);
                                else
                                    % Estimate transformation
                                    if j==2 && k==3
%                                        save('Dataj2k3Before.mat')  
                                        nop=1;
                                    end
%                                     tF(i,j,k) = ...
%                                         obj.Volregtform( ...
%                                         Vf{k}, Rf, ...
%                                         Vm{k}, Rm, ...
%                                         tType{j}, ...
%                                         tFini,Nbits);
                                     tF(i,j,k) = ...
                                        obj.VolregtformTest( ...
                                        Vf{k}, Rf, ...
                                        Vm{k}, Rm, ...
                                        tType{j}, ...
                                        tFini,Nbits,i,j,k);
                                    if j==2 && k==3
%                                        save('Dataj2k3After.mat')  
                                        nop=1;
                                    end
                                end
                            else
                                tF(i,j,k) = obj.tform{1};
                            end
                        catch ME
                            MCC_writeLog([cd '\log.txt'],ME, ...
                                ['(' tType{j} ' registration)' ...
                                vsI(i).root]);
                        end
                    end
                    % Register
                    Vr{k} = imwarp( ...
                        Vm0 ,Rm, ...
                        tF(i,j,k),'bicubic','OutputView',Rf);
                    % Mutual information (MI)
                    MI(i,j,k) = MCC_MutualInfomation(...
                        Vf0, Vr{k}, Nbins);
                    % Relative MI
                    pc(i,j,k) = ...
                        100*(MI(i,j,k)-MI(i,1,1))/MI(i,1,1);
                    %save(['IterationS5_' num2str(k) '_' num2str(i) '.mat'])  
                end
                % Echo
                c = { ....
                    sprintf('\t\t\t%1.2f', MI(i,j,1)), ...
                    sprintf('\t\t%1.2f',   MI(i,j,2)), ...
                    sprintf('\t\t%1.2f',   MI(i,j,3)), ...
                    sprintf('\t\t%1.1f%%', pc(i,j,1)), ...
                    sprintf('\t\t%1.1f%%', pc(i,j,2)), ...
                    sprintf('\t\t%1.1f%%', pc(i,j,3)) ...
                    };
                MCC_Disp(strjoin(c,''),5);
            end
            % Select the best and update
            MI_ = squeeze(MI(i,:,:));
            pc_ = squeeze(pc(i,:,:));
            tF_ = squeeze(tF(i,:,:));
            [~, ind]=max(MI_(:));
            %save(['IterationS6_' num2str(i) '.mat'])  
            % Apply final traformation
            if isempty(strfind(obj.content{i},'Mask'))
                obj.tform{i} = tF_(ind);
                % Organ specifities
                switch obj.eOrganCur
                    case MCC_eOrgan.Kidney
                    case MCC_eOrgan.Prostate
                        %obj.tform{i} = affine3d(eye(4));
                    otherwise
                end
                % Mask
                Vrm = imwarp( ...
                    single(Vm0),Rm, obj.tform{i}, ...
                    'bicubic','OutputView',Rf, 'FillValues', -1);
                try
                    masks(:,:,:,i) = (Vrm>=0);
                end
                % Trans
                vsO(i).data = uint32( ...
                    imwarp( ...
                    Vm0,Rm, obj.tform{i}, ...
                    'bicubic','OutputView',Rf));
                %save(['IterationS7_' num2str(i) '.mat'])  
            else
                % CT mask
                R = obj.Volref3d(vsI(i));
                V = single(vsI(i).data);
                V = 255 * V / max(V(:));
                % Transformation
                Vmask_CT = imwarp( ...
                    V, R, obj.tform{1}, ...
                    'bicubic','OutputView',R);
                % Croping and resampling
                Vmask_MR = imwarp( ...
                    Vmask_CT, R, affine3d(eye(4)), ...
                    'bicubic','OutputView',Rf);
                vsO(i).data = uint32(Vmask_MR);
            end
            % Selection
            selT = {...
                'none' ,'rigid', 'simi.', 'affi.', ...
                'none' ,'rigid', 'simi.', 'affi.',...
                'none' ,'rigid', 'simi.'  'affi.'...
                };
            selD = {...
                'inte.','inte.', 'inte.', 'inte.',...
                'grad.','grad.', 'grad.', 'grad.',...
                'edge' ,'edge' , 'edge'   'edge.'...
                };
            MCC_Disp( [ ...
                selT{ind} ' (' selD{ind} ')', ...
                sprintf(' = %1.2f (%1.1f%%)', ...
                MI_(ind), pc_(ind))] , 26);
            disp(' ');
            % Update
            vsO(i).UpdateMetadata;
            vsO(i).eType = MCC_eType.Registered;
            %save(['IterationS8_' num2str(i) '.mat'])  
            % CSV file
            indF=strfind(obj.root, obj.InstituteID);
            aux=strsplit(obj.content{i},'\');
            fileN_csv=[obj.root '\Registration' aux{end} '.csv'];
            if exist(fileN_csv, 'file')
                fid_csv = fopen(fileN_csv,'at+');
            else
                fid_csv = fopen(fileN_csv,'wt+');
                try
                fprintf(fid_csv,...
                    '%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n', ...
                    'Version', ...
                    'Year', ...
                    'Month', ...
                    'Day', ...
                    'Hour', ...
                    'Min', ...
                    'Sec.', ...
                    'Institute', ...
                    'Database', ...
                    'Cohort', ...
                    'Patient', ...
                    'Study date', ...
                    'Imaging Mode', ...
                    'Imaging Mode {r}', ...
                    'Vx [mm3] {i}', ...
                    'Vx [mm3] {f}', ...
                    'MI {r}', ...
                    'MI {i0}', ...
                    'MI {i}', ...
                    'MI {f}', ...
                    'MI {(f-i0)/i0)} [%]', ...
                    'MI {(f-i)/i)} [%]', ...
                    'MI {i0/r} [%]', ...
                    'MI {f/r} [%]', ...
                    'Method', ...
                    'Transform', ...
                    'Data', ...
                    'Time [s]', ...
                    'Comments', ...
                    'Path' ...
                    );
                catch ME
                    ME
                end
            end
            clk = strsplit(MCC_clock2str,' ');
            try                  % 8/2
            fprintf(fid_csv, ...
                '%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%1.2f,%1.2f,%1.2f,%1.2f,%1.2f,%1.2f,%1.2f,%1.2f,%1.2f,%1.2f,%d,%s,%s,%1.2f,%s,%s\n', ...
                obj.version, ...
                clk{2}, clk{3}, clk{4}, clk{5}, clk{6}, clk{7}, ...
                obj.InstituteID, ...
                obj.DatabaseID, ...
                obj.CohortID, ...
                obj.PatientID, ...
                obj.StudyDateID, ...
                strrep(vsI(i).name, ',', ' '), ...
                strrep(vsI(iVolRef).name, ',', ' '), ...
                vsI(i).GetVoxelSize_mm3, ...
                vsO(i).GetVoxelSize_mm3, ...
                MIref, ...
                MI0(i), ...
                MI_(1), ...
                MI_(ind), ...
                100*(MI_(ind)-MI0(i))/MI0(i), ...
                pc_(ind), ...
                100*MI0(i)/MIref, ...
                100*MI_(ind)/MIref, ...
                ind, ...
                selT{ind}, ...
                selD{ind}, ...
                toc, ...
                ' ', ...
                scrF ...
                );
                fclose(fid_csv);
            catch ME
                ME
            end
        end
        %save(['IterationS9_' num2str(i) '.mat'])  
        vsOi=vsO(i);
        tform=obj.tform{i};
%         if exist(['IterationPar_' num2str(i) '.mat'])
%             %save(['IterationParD2_' num2str(i) '.mat'])
%         else
%             %save(['IterationPar_' num2str(i) '.mat'])
%         end
        
        end